"" Source your .vimrc
"source ~/.vimrc

" -- options --
set incsearch
set showmode
set showcmd
set smartcase
set smartindent
set autoindent
set ignorecase
set hlsearch
set scrolloff=8
set clipboard+=unnamed " access the system clipboard
set encoding=utf-8
set shiftwidth=2
set tabstop=2
set number relativenumber
set history=100000
set nu rnu
" 關掉吵死人的鈴聲
set visualbell
set noerrorbells

" -- leader key --
let mapleader=" "

" -- plugins --
set commentary
set surround
set NERDTree
set easymotion
set notimeout
set highlightedyank

" -- idea specific settings --
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep
" Map vim marks to IDEA global marks
set ideamarks
set which-key

" -- keymappings
nmap <S-l> <action>(NextTab)
nmap <S-h> <action>(PreviousTab)
nmap <leader>cd <action>(ShowErrorDescription)
nmap <leader>cr <action>(RenameElement)
nmap <leader>p :action ShowFilePath<CR>
nmap <leader>ff <action>(GotoFile)
nnoremap <leader>sg :action FindInPath<CR>
nnoremap gD :action QuickImplementations<CR>
nmap ]d <action>(GotoNextError)
nmap [d <action>(GotoPreviousError)
nmap <leader>fg <action>(RecentFiles)
" Folding
map <leader>zc :action CollapseAllRegions<CR>
map <leader>zo :action ExpandAllRegions<CR>
" Navigation bar
nmap <leader>nb <Action>(ShowNavBar)
" Git windows
map <leader>gc <Action>(CheckinProject)
map <leader>gs <Action>(ActivateVersionControlToolWindow)
map <leader>gb <Action>(Git.Branches)
nmap <leader>gh <Action>(Vcs.ShowTabbedFileHistory)
nmap <leader>gd <Action>(Compare.SameVersion)
map <leader>fl <action>(RecentLocations)
" Popup navigation
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)
" Close active tab
map <leader>q <action>(CloseContent)
" Refactoring
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" Keys from vim-gitgutter
nmap ]h <Action>(VcsShowNextChangeMarker)
nmap [h <Action>(VcsShowPrevChangeMarker)

nmap <leader>u <action>(ShowUsages)
nmap delo <action>(CloseAllEditorsButActive)
xnoremap p "_dP
nnoremap ,s :action FileStructurePopup<CR>

map <leader>e :NERDTree<CR>
map <C-c> :NERDTreeClose<CR>
map <C-z> :NERDTreeFind<CR>
map <leader>ss <Plug>(easymotion-s)
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpParent='h'
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1

let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKeyDesc_leader = "<leader> Leader key"
let g:WhichKeyDesc_leader = "<leader>e Open file explorer"

let g:WhichKeyDesc_code_action = "<leader>c Code action"
let g:WhichKeyDesc_code_action = "<leader>cd Display diagnostics"

let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"

let g:WhichKeyDesc_search_every_where = "<leader>sg Search every where"

let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fg Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"

let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"

let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"
let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"

let g:WhichKeyDesc_git = "<leader>g Git operations"
let g:WhichKeyDesc_git_commit = "<leader>gc Open Git commit dialog"
let g:WhichKeyDesc_git_status = "<leader>gs Open Git status dialog"
let g:WhichKeyDesc_git_branches = "<leader>gb Open Git branches list"
let g:WhichKeyDesc_git_diff = "<leader>gd Open Git current file diff"
let g:WhichKeyDesc_git_history = "<leader>gh Open Git current file history"

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)


" Find more examples here: https://jb.gg/share-ideavimrc
